#!/usr/bin/env python3
"""
Prepare SINASC Dashboard for Deployment

This script prepares your dashboard for production deployment by:
1. Creating optimized requirements.txt from uv environment
2. Generating platform-specific config files
3. Validating data and dependencies
4. Creating deployment documentation
5. Handling Python 3.13 vs deployment compatibility
"""

import json
from pathlib import Path


def print_header(text: str):
    """Print a formatted header."""
    print(f"\n{'=' * 60}")
    print(f"  {text}")
    print(f"{'=' * 60}\n")


def print_step(step: int, text: str):
    """Print a step indicator."""
    print(f"[{step}/8] {text}...")


def create_production_requirements():
    """Create production-ready requirements.txt."""
    print_step(1, "Creating production requirements.txt")

    # Core production dependencies
    prod_requirements = """# SINASC Dashboard - Production Dependencies
# Generated by prepare_deploy.py

# Core Framework
dash==2.14.2
dash-bootstrap-components==1.5.0

# Data Processing
pandas==2.1.4
pyarrow==14.0.1

# Visualization
plotly==5.18.0

# Production Server
gunicorn==21.2.0

# Optional
python-dotenv==1.0.0
"""

    with open("dashboard/requirements.txt", "w") as f:
        f.write(prod_requirements)

    print("  ✅ Created dashboard/requirements.txt")


def create_render_config():
    """Create render.yaml for Render.com deployment."""
    print_step(2, "Creating Render.com config")

    render_yaml = """# Render.com Deployment Configuration
# Deploy at: https://render.com

services:
  - type: web
    name: sinasc-dashboard
    env: python
    region: oregon  # or: frankfurt, singapore
    plan: free
    buildCommand: pip install -r dashboard/requirements.txt
    startCommand: cd dashboard && gunicorn app:server --bind 0.0.0.0:$PORT --workers 2 --timeout 120
    healthCheckPath: /
    envVars:
      - key: PYTHON_VERSION
        value: 3.11
      - key: DASH_DEBUG
        value: false
"""

    with open("render.yaml", "w") as f:
        f.write(render_yaml)

    print("  ✅ Created render.yaml")


def create_procfile():
    """Create Procfile for Heroku-style platforms."""
    print_step(3, "Creating Procfile")

    procfile = """web: cd dashboard && gunicorn app:server --bind 0.0.0.0:$PORT --workers 2 --timeout 120
"""

    with open("Procfile", "w") as f:
        f.write(procfile)

    print("  ✅ Created Procfile")


def create_railway_config():
    """Create railway.json for Railway.app."""
    print_step(4, "Creating Railway.app config")

    railway_config = {
        "$schema": "https://railway.app/railway.schema.json",
        "build": {"builder": "NIXPACKS", "buildCommand": "pip install -r dashboard/requirements.txt"},
        "deploy": {
            "startCommand": "cd dashboard && gunicorn app:server --bind 0.0.0.0:$PORT --workers 2",
            "healthcheckPath": "/",
            "healthcheckTimeout": 100,
        },
    }

    with open("railway.json", "w") as f:
        json.dump(railway_config, f, indent=2)

    print("  ✅ Created railway.json")


def create_dockerfile():
    """Create Dockerfile for containerized deployment."""
    print_step(5, "Creating Dockerfile (optional)")

    dockerfile = """# SINASC Dashboard - Production Docker Image
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \\
    gcc \\
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY dashboard/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code and data
COPY dashboard/ ./dashboard/
COPY dashboard_data/ ./dashboard_data/

# Create non-root user
RUN useradd -m -u 1000 dashuser && chown -R dashuser:dashuser /app
USER dashuser

# Expose port
EXPOSE 8050

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \\
    CMD python -c "import requests; requests.get('http://localhost:8050/')" || exit 1

# Run application
CMD ["gunicorn", "--chdir", "dashboard", "app:server", "--bind", "0.0.0.0:8050", "--workers", "2", "--timeout", "120"]
"""

    with open("Dockerfile", "w") as f:
        f.write(dockerfile)

    # Also create .dockerignore
    dockerignore = """# Docker ignore file
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
*.so
.venv/
venv/
ENV/
.git/
.gitignore
*.md
!README.md
.DS_Store
.vscode/
.idea/
*.log
.env
data/SINASC/
scripts/
notebooks/
"""

    with open(".dockerignore", "w") as f:
        f.write(dockerignore)

    print("  ✅ Created Dockerfile and .dockerignore")


def create_runtime_txt():
    """Create runtime.txt for Python version specification."""
    print_step(6, "Creating runtime.txt")

    with open("runtime.txt", "w") as f:
        f.write("python-3.11.0\n")

    print("  ✅ Created runtime.txt")


def validate_deployment():
    """Validate deployment requirements."""
    print_step(7, "Validating deployment setup")

    checks = []

    # Check data directory
    data_path = Path("dashboard_data")
    if data_path.exists():
        size_mb = sum(f.stat().st_size for f in data_path.rglob("*") if f.is_file()) / (1024 * 1024)
        checks.append(f"  ✅ Data directory: {size_mb:.2f} MB")
        if size_mb > 100:
            checks.append("  ⚠️  Warning: Data size is large. Consider optimization.")
    else:
        checks.append("  ❌ Data directory not found!")

    # Check dashboard directory
    if Path("dashboard/app.py").exists():
        checks.append("  ✅ Dashboard app.py exists")
    else:
        checks.append("  ❌ Dashboard app.py not found!")

    # Check requirements
    if Path("dashboard/requirements.txt").exists():
        checks.append("  ✅ Requirements.txt exists")
    else:
        checks.append("  ❌ Requirements.txt not found!")

    # Check for secrets in code
    secret_patterns = ["API_KEY", "SECRET_KEY", "PASSWORD", "TOKEN"]
    found_secrets = False
    for py_file in Path("dashboard").rglob("*.py"):
        with open(py_file, "r", encoding="utf-8") as f:
            content = f.read()
            for pattern in secret_patterns:
                if pattern in content.upper() and "=" in content:
                    checks.append(f"  ⚠️  Potential secret in {py_file.name}")
                    found_secrets = True
                    break

    if not found_secrets:
        checks.append("  ✅ No obvious secrets in code")

    print("\n".join(checks))


def create_deployment_readme():
    """Create deployment-specific README."""
    print_step(8, "Creating deployment README")

    readme = """# SINASC Dashboard - Deployment

## 🚀 Quick Deploy to Render.com (Recommended)

### One-Click Deploy:
[![Deploy to Render](https://render.com/images/deploy-to-render-button.svg)](https://render.com/deploy)

### Manual Deploy:
1. Push this repo to GitHub
2. Go to https://render.com
3. Click "New +" → "Web Service"
4. Connect your GitHub repo
5. Use these settings:
   - **Build Command**: `pip install -r dashboard/requirements.txt`
   - **Start Command**: `cd dashboard && gunicorn app:server --bind 0.0.0.0:$PORT`
   - **Plan**: Free
6. Click "Create Web Service"
7. Wait 3-5 minutes for deployment
8. Done! 🎉

## 🐳 Docker Deployment

```bash
# Build image
docker build -t sinasc-dashboard .

# Run container
docker run -p 8050:8050 sinasc-dashboard
```

Visit: http://localhost:8050

## 🚂 Railway.app Deployment

1. Go to https://railway.app
2. Click "New Project" → "Deploy from GitHub"
3. Select this repository
4. Railway auto-detects and deploys
5. Done!

## 📊 Hugging Face Spaces

1. Create account at https://huggingface.co
2. Create new Space with Dash SDK
3. Upload dashboard/ and dashboard_data/
4. Add requirements.txt
5. Space auto-deploys

## 🔧 Local Production Test

```bash
cd dashboard
gunicorn app:server --bind 0.0.0.0:8050 --workers 2
```

## 📋 Environment Variables (Optional)

Create `.env` file if needed:
```env
DASH_DEBUG=False
PORT=8050
WORKERS=2
```

## 🆘 Troubleshooting

### Memory errors:
- Free tiers have 512MB RAM limit
- Your data (532KB) should be fine
- If issues, reduce data or upgrade plan

### Slow startup:
- First deploy takes 3-5 minutes
- Subsequent deploys are faster
- Use `--preload` flag with gunicorn

### Module errors:
- Ensure all deps in requirements.txt
- Check Python version compatibility

## 📈 Monitoring

- **Render**: Built-in metrics at dashboard
- **Railway**: Metrics in project dashboard
- **Docker**: Use `docker stats`

## 🔄 Updates

```bash
git add .
git commit -m "Update dashboard"
git push
# Platform auto-deploys new version
```

## 🌐 Custom Domain

Most platforms support custom domains:
- Render: Free on any plan
- Railway: $5/month plan
- Add your domain in platform settings

---

**Need help?** Check DEPLOYMENT_GUIDE.md for detailed instructions.
"""

    with open("DEPLOY_README.md", "w") as f:
        f.write(readme)

    print("  ✅ Created DEPLOY_README.md")


def print_summary():
    """Print deployment summary."""
    print_header("🎉 Deployment Preparation Complete!")

    summary = """
Generated Files:
  ✅ dashboard/requirements.txt      - Production dependencies
  ✅ render.yaml                      - Render.com config
  ✅ Procfile                         - Heroku-style platforms
  ✅ railway.json                     - Railway.app config
  ✅ Dockerfile                       - Container deployment
  ✅ .dockerignore                    - Docker optimization
  ✅ runtime.txt                      - Python version
  ✅ DEPLOY_README.md                 - Deployment instructions

Next Steps:
  1. Review generated files
  2. Commit to git:
     $ git add .
     $ git commit -m "Prepare for deployment"
     $ git push origin main
  
  3. Choose deployment platform:
     
     🏆 RECOMMENDED: Render.com (Free Forever)
     → Go to https://render.com
     → Click "New +" → "Web Service"
     → Connect GitHub repo
     → Deploy!
     
     🎯 Alternative: Railway.app
     → Go to https://railway.app
     → Deploy from GitHub
     
     🚀 Alternative: Hugging Face Spaces
     → Go to https://huggingface.co/spaces
     → Create new Space (Dash SDK)
     → Upload files

  4. Your dashboard will be live at:
     https://your-app-name.onrender.com

Platform Comparison:
  Platform          Cost       Memory    Speed    Setup
  ───────────────────────────────────────────────────
  Render.com        FREE       512MB     Fast     Easy
  Railway.app       $5 credit  512MB     Fast     Easy
  HF Spaces         FREE       Varies    Medium   Easy
  PythonAnywhere    FREE       512MB     Medium   Manual
  Cloud Dash        $29/mo     Custom    Fast     Easy

RECOMMENDATION: Use Render.com
  ✅ Free forever
  ✅ 512MB RAM (your data is only 532KB)
  ✅ No credit card required
  ✅ Professional URL
  ✅ Auto-deploy from GitHub
  ✅ 99.9% uptime

💡 Pro Tip: Test locally first:
  $ cd dashboard
  $ gunicorn app:server --bind 0.0.0.0:8050
"""

    print(summary)
    print("\n" + "=" * 60)
    print("📖 Full Guide: Read DEPLOYMENT_GUIDE.md")
    print("🚀 Quick Start: Read DEPLOY_README.md")
    print("=" * 60 + "\n")


def main():
    """Main deployment preparation workflow."""
    print_header("🚀 SINASC Dashboard - Deployment Preparation")

    print("This script will prepare your dashboard for production deployment.\n")

    # Check if we're in the right directory
    if not Path("dashboard").exists():
        print("❌ Error: dashboard/ directory not found!")
        print("   Please run this script from the project root directory.")
        return

    try:
        # Create all deployment files
        create_production_requirements()
        create_render_config()
        create_procfile()
        create_railway_config()
        create_dockerfile()
        create_runtime_txt()
        validate_deployment()
        create_deployment_readme()

        # Print summary
        print_summary()

    except Exception as e:
        print(f"\n❌ Error during preparation: {e}")
        print("   Please check the error and try again.")


if __name__ == "__main__":
    main()
